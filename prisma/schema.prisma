datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    password      String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    Post             Post[]
    Comment          Comment[]
    Like             Like[]
    seenMessage      Message?           @relation("Seen", fields: [messageId], references: [id])
    messageId        String?
    Message          Message[]
    UserConversation UserConversation[]
    Reply            Reply[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Post {
    id     String @id @default(cuid())
    userId String
    body   String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    Comment Comment[]
    Like    Like[]
}

model Comment {
    id     String @id @default(cuid())
    userId String
    postId String
    body   String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    post  Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
    Reply Reply[]
}

model Reply {
    id        String @id @default(cuid())
    userId    String
    commentId String
    body      String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Like {
    id     String @id @default(cuid())
    userId String
    postId String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Conversation {
    id            String   @id @default(cuid())
    createdAt     DateTime @default(now())
    lastMessageAt DateTime @default(now())
    name          String?
    isGroup       Boolean?

    messages Message[]
    users    UserConversation[]
}

model Message {
    id             String   @id @default(cuid())
    body           String?
    image          String?
    createdAt      DateTime @default(now())
    seen           User[]   @relation("Seen")
    conversationId String
    senderId       String

    conversation Conversation @relation(fields: [conversationId], references: [id])
    sender       User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model UserConversation {
    userId         String
    conversationId String

    User         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    Conversation Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

    @@id([userId, conversationId])
}
